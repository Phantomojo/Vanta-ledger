name: 🚀 Main CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r constraints.txt
        pip install pytest pytest-cov flake8 black isort mypy
        
    - name: 🧹 Code formatting check
      run: |
        echo "🔍 Checking code formatting..."
        black --check --diff .
        isort --check-only --diff .
        
    - name: 🔍 Linting
      run: |
        echo "🔍 Running linters..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: 🔍 Type checking
      run: |
        echo "🔍 Running type checker..."
        mypy backend/src/ --ignore-missing-imports
        
    - name: 🧪 Run tests
      run: |
        echo "🧪 Running tests..."
        pytest tests/ -v --cov=backend/src --cov-report=xml --cov-report=html
        
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: 🔒 Security Checks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: 🔧 Install security tools
      run: |
        pip install --upgrade pip
        pip install bandit safety
        
    - name: 🚨 Run Bandit security scan
      run: |
        echo "🔍 Running Bandit security analysis..."
        bandit -r backend/src/ -f json -o bandit-results.json || true
        
    - name: 🛡️ Run Safety vulnerability check
      run: |
        echo "🔍 Checking dependencies for vulnerabilities..."
        safety check --json --output safety-results.json || true
        
    - name: 📤 Upload security results
      uses: actions/upload-artifact@v3
      with:
        name: security-results
        path: |
          bandit-results.json
          safety-results.json
        retention-days: 30

  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: 🔧 Install dependencies
      run: |
        pip install --upgrade pip
        pip install build wheel
        
    - name: 🏗️ Build package
      run: |
        echo "🏗️ Building package..."
        python -m build
        
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/
        retention-days: 7

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: 🔧 Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧪 Run integration tests
      run: |
        echo "🧪 Running integration tests..."
        pytest tests/ -m integration --tb=short
        
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your staging deployment commands here
        echo "✅ Staging deployment completed"

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: 🔧 Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧪 Run production tests
      run: |
        echo "🧪 Running production tests..."
        pytest tests/ -m production --tb=short
        
    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        # Add your production deployment commands here
        echo "✅ Production deployment completed"
