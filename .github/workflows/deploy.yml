name: 🚀 Deployment Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test-deployment:
    name: 🧪 Test Deployment
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧪 Run deployment tests
      run: |
        echo "🧪 Running deployment tests..."
        # Add your deployment validation tests here
        echo "✅ Deployment tests passed"

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test-deployment]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        echo "Digest: ${{ needs.build.outputs.image-digest }}"
        
        # Add your staging deployment commands here
        # Example: kubectl apply, docker-compose, etc.
        
        echo "✅ Staging deployment completed successfully!"
        
    - name: 🔍 Health check
      run: |
        echo "🔍 Performing health check..."
        # Add your health check commands here
        # Example: curl, kubectl get pods, etc.
        
        echo "✅ Health check passed"
        
    - name: 📊 Notify deployment
      run: |
        echo "📊 Staging deployment notification sent"
        # Add your notification logic here (Slack, email, etc.)

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test-deployment]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        echo "Digest: ${{ needs.build.outputs.image-digest }}"
        
        # Add your production deployment commands here
        # Example: kubectl apply, docker-compose, etc.
        
        echo "✅ Production deployment completed successfully!"
        
    - name: 🔍 Health check
      run: |
        echo "🔍 Performing health check..."
        # Add your health check commands here
        # Example: curl, kubectl get pods, etc.
        
        echo "✅ Health check passed"
        
    - name: 📊 Notify deployment
      run: |
        echo "📊 Production deployment notification sent"
        # Add your notification logic here (Slack, email, etc.)
        
    - name: 🏷️ Create release tag
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        echo "🏷️ Creating release tag..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create a release tag
        VERSION=$(date +"%Y.%m.%d-%H%M")
        git tag -a "v$VERSION" -m "Release v$VERSION - Production deployment"
        git push origin "v$VERSION"
        
        echo "✅ Release tag v$VERSION created"

  rollback:
    name: 🔄 Rollback (if needed)
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔄 Rollback deployment
      run: |
        echo "🔄 Rolling back deployment..."
        
        # Add your rollback logic here
        # Example: kubectl rollout undo, docker-compose down, etc.
        
        echo "✅ Rollback completed successfully"
        
    - name: 📊 Notify rollback
      run: |
        echo "📊 Rollback notification sent"
        # Add your notification logic here

  deployment-summary:
    name: 📊 Deployment Summary
    runs-on: ubuntu-latest
    needs: [build, deploy-staging, deploy-production, rollback]
    if: always()
    
    steps:
    - name: 📊 Generate deployment summary
      run: |
        echo "📊 Generating deployment summary..."
        
        echo "# 🚀 Deployment Summary" > deployment-summary.md
        echo "Generated: $(date)" >> deployment-summary.md
        echo "" >> deployment-summary.md
        
        echo "## 📋 Deployment Results" >> deployment-summary.md
        echo "- Build: ${{ needs.build.result }}" >> deployment-summary.md
        echo "- Staging Deployment: ${{ needs.deploy-staging.result }}" >> deployment-summary.md
        echo "- Production Deployment: ${{ needs.deploy-production.result }}" >> deployment-summary.md
        echo "- Rollback: ${{ needs.rollback.result }}" >> deployment-summary.md
        echo "" >> deployment-summary.md
        
        echo "## 🏗️ Build Information" >> deployment-summary.md
        echo "- Image Tag: ${{ needs.build.outputs.image-tag }}" >> deployment-summary.md
        echo "- Image Digest: ${{ needs.build.outputs.image-digest }}" >> deployment-summary.md
        echo "" >> deployment-summary.md
        
        echo "## 🎯 Status" >> deployment-summary.md
        if [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.deploy-staging.result }}" == "success" ] && [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "🎉 All deployments successful!" >> deployment-summary.md
        elif [ "${{ needs.rollback.result }}" == "success" ]; then
          echo "🔄 Deployment rolled back successfully" >> deployment-summary.md
        else
          echo "❌ Some deployments failed" >> deployment-summary.md
        fi
        
    - name: 📤 Upload deployment summary
      uses: actions/upload-artifact@v3
      with:
        name: deployment-summary
        path: deployment-summary.md
        retention-days: 30
