name: 🔒 Secret Scanning & Security Audit

on:
  push:
    branches: [ main, master, develop, jules ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  secret-scanning:
    name: 🔍 Comprehensive Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for thorough scanning
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: 🔧 Install security tools
      run: |
        # Install comprehensive security scanning tools
        pip install --upgrade pip
        pip install bandit safety detect-secrets trufflehog
        
        # Install additional security tools
        sudo apt-get update
        sudo apt-get install -y git-secrets
        
    - name: 🚨 Run Bandit security analysis
      run: |
        echo "🔍 Running Bandit security analysis..."
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt -o bandit-report.txt || true
        
    - name: 🛡️ Run Safety vulnerability check
      run: |
        echo "🔍 Running Safety vulnerability check..."
        safety check --json --output safety-report.json || true
        safety check --output safety-report.txt || true
        
    - name: 🔐 Run Detect-Secrets
      run: |
        echo "🔍 Running Detect-Secrets scan..."
        detect-secrets scan --baseline .secrets.baseline || true
        
    - name: 🐷 Run TruffleHog
      run: |
        echo "🔍 Running TruffleHog scan..."
        trufflehog --json . > trufflehog-report.json || true
        trufflehog . > trufflehog-report.txt || true
        
    - name: 🔑 Run Git-Secrets
      run: |
        echo "🔍 Running Git-Secrets scan..."
        git secrets --scan-history || true
        
    - name: 📊 Generate security summary
      run: |
        echo "📊 Generating security summary..."
        echo "# 🔒 Security Scan Summary" > security-scan-summary.md
        echo "Generated: $(date)" >> security-scan-summary.md
        echo "" >> security-scan-summary.md
        
        if [ -f "bandit-report.txt" ]; then
          echo "## 🚨 Bandit Security Issues" >> security-scan-summary.md
          cat bandit-report.txt >> security-scan-summary.md
          echo "" >> security-scan-summary.md
        fi
        
        if [ -f "safety-report.txt" ]; then
          echo "## 🛡️ Safety Vulnerability Issues" >> security-scan-summary.md
          cat safety-report.txt >> security-scan-summary.md
          echo "" >> security-scan-summary.md
        fi
        
        if [ -f "trufflehog-report.txt" ]; then
          echo "## 🐷 TruffleHog Secret Detection" >> security-scan-summary.md
          cat trufflehog-report.txt >> security-scan-summary.md
          echo "" >> security-scan-summary.md
        fi
        
    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-reports
        path: |
          *.json
          *.txt
          *.md
        retention-days: 30
        
    - name: 🚨 Fail on critical issues
      run: |
        echo "🔍 Checking for critical security issues..."
        
        # Check if any critical Bandit issues found
        if [ -f "bandit-report.json" ]; then
          CRITICAL_ISSUES=$(jq '[.results[] | select(.issue_severity == "HIGH" or .issue_severity == "MEDIUM")] | length' bandit-report.json)
          if [ "$CRITICAL_ISSUES" -gt 0 ]; then
            echo "❌ CRITICAL: Found $CRITICAL_ISSUES high/medium security issues"
            exit 1
          fi
        fi
        
        # Check if any Safety vulnerabilities found
        if [ -f "safety-report.json" ]; then
          VULNERABILITIES=$(jq 'length' safety-report.json)
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "❌ CRITICAL: Found $VULNERABILITIES dependency vulnerabilities"
            exit 1
          fi
        fi
        
        echo "✅ No critical security issues found"
        
  dependency-audit:
    name: 📦 Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: 🔍 Audit Python dependencies
      run: |
        echo "🔍 Auditing Python dependencies..."
        pip install --upgrade pip
        pip install --upgrade safety pip-audit
        
        # Run safety check
        safety check --full-report || true
        
        # Run pip-audit
        pip-audit --format json --output pip-audit-report.json || true
        pip-audit --output pip-audit-report.txt || true
        
    - name: 📤 Upload dependency audit reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-audit-reports
        path: |
          pip-audit-report.*
        retention-days: 30
        
  code-quality:
    name: 🧹 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: 🔧 Install code quality tools
      run: |
        pip install --upgrade pip
        pip install flake8 black isort mypy pylint
        
    - name: 🧹 Run code quality checks
      run: |
        echo "🧹 Running code quality checks..."
        
        # Flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        
        # Black formatting check
        black --check --diff . || true
        
        # Import sorting
        isort --check-only --diff . || true
        
        # Type checking
        mypy . --ignore-missing-imports || true
        
        # Pylint
        pylint **/*.py --disable=C0114,C0116 || true
