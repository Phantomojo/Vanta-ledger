name: Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Vulnerability Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pyup-safety
        
    - name: Run Bandit security scan
      run: |
        bandit -r backend/src/ -f json -o bandit-report.json || true
        bandit -r backend/src/ -f txt -o bandit-report.txt
        
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --output safety-report.txt
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          bandit-report.txt
          safety-report.json
          safety-report.txt
          
    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let banditOutput = '';
          let safetyOutput = '';
          
          try {
            banditOutput = fs.readFileSync('bandit-report.txt', 'utf8');
          } catch (e) {
            banditOutput = 'No Bandit issues found';
          }
          
          try {
            safetyOutput = fs.readFileSync('safety-report.txt', 'utf8');
          } catch (e) {
            safetyOutput = 'No Safety issues found';
          }
          
          const comment = `## üîí Security Scan Results
          
          ### Bandit Security Scan
          \`\`\`
          ${banditOutput}
          \`\`\`
          
          ### Dependency Security Scan
          \`\`\`
          ${safetyOutput}
          \`\`\`
          
          **Security Status**: ${banditOutput.includes('No issues identified') && safetyOutput.includes('No known security vulnerabilities') ? '‚úÖ PASSED' : '‚ö†Ô∏è ISSUES FOUND'}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  secret-scan:
    runs-on: ubuntu-latest
    name: Secret Detection
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --only-verified --format json --output trufflehog-report.json
        
    - name: Upload secret scan report
      uses: actions/upload-artifact@v3
      with:
        name: secret-scan-report
        path: trufflehog-report.json
        
    - name: Fail if secrets found
      run: |
        if [ -s trufflehog-report.json ]; then
          echo "üö® SECRETS DETECTED! Please remove any hardcoded secrets."
          cat trufflehog-report.json
          exit 1
        else
          echo "‚úÖ No secrets detected"
        fi

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Security
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy pylint
        
    - name: Run Flake8
      run: |
        flake8 backend/src/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Run Black check
      run: |
        black --check --diff backend/src/
        
    - name: Run MyPy
      run: |
        mypy backend/src/ --ignore-missing-imports
        
    - name: Run Pylint
      run: |
        pylint backend/src/ --disable=C0114,C0115,C0116

  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Vulnerability Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run pip-audit
      run: |
        pip install pip-audit
        pip-audit --format json --output pip-audit-report.json || true
        pip-audit --output pip-audit-report.txt
        
    - name: Upload dependency audit report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-audit-report
        path: |
          pip-audit-report.json
          pip-audit-report.txt

  file-upload-check:
    runs-on: ubuntu-latest
    name: File Upload Security Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for large files
      run: |
        find . -type f -size +50M | head -10 > large-files.txt
        if [ -s large-files.txt ]; then
          echo "üö® Large files detected:"
          cat large-files.txt
          exit 1
        else
          echo "‚úÖ No large files detected"
        fi
        
    - name: Check for sensitive file types
      run: |
        find . -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" > sensitive-files.txt
        if [ -s sensitive-files.txt ]; then
          echo "üö® Sensitive files detected:"
          cat sensitive-files.txt
          exit 1
        else
          echo "‚úÖ No sensitive files detected"
        fi

  branch-protection:
    runs-on: ubuntu-latest
    name: Branch Protection Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check branch protection
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "üîí Main branch detected - enforcing protection rules"
          # Additional main branch checks can be added here
        fi
        
    - name: Validate commit messages
      run: |
        # Check if commit messages follow conventional commits
        git log --oneline -10 | while read line; do
          if ! echo "$line" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+"; then
            echo "‚ö†Ô∏è Commit message doesn't follow conventional commits: $line"
          fi
        done

