name: 🧪 Comprehensive Testing Suite

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        os: [ubuntu-latest, windows-latest]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r config/requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-mock
        
    - name: 🧪 Run unit tests
      run: |
        echo "🧪 Running unit tests..."
        pytest tests/ -v --cov=backend/src --cov-report=xml --cov-report=html --cov-report=term-missing
        
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: codecov-${{ matrix.os }}-${{ matrix.python-version }}
        fail_ci_if_error: false

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r config/requirements.txt
        pip install pytest pytest-cov pytest-docker
        
    - name: 🔧 Set up test environment
      run: |
        echo "🔧 Setting up test environment..."
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_db"
        export REDIS_URL="redis://localhost:6379"
        
    - name: 🧪 Run integration tests
      run: |
        echo "🧪 Running integration tests..."
        pytest tests/ -m integration -v --tb=short
        
    - name: 📊 Upload integration test results
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: |
          .pytest_cache/
          htmlcov/
        retention-days: 30

  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r config/requirements.txt
        pip install pytest-benchmark locust
        
    - name: ⚡ Run performance tests
      run: |
        echo "⚡ Running performance tests..."
        pytest tests/ -m performance -v --benchmark-only
        
    - name: 📊 Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: |
          .pytest_cache/
          .benchmarks/
        retention-days: 30

  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r config/requirements.txt
        pip install bandit safety detect-secrets
        
    - name: 🔒 Run security tests
      run: |
        echo "🔒 Running security tests..."
        
        echo "🔍 Running Bandit security analysis..."
        bandit -r backend/src/ -f json -o bandit-results.json || true
        
        echo "🛡️ Running Safety vulnerability check..."
        safety check --json --output safety-results.json || true
        
        echo "🔐 Running Detect-Secrets scan..."
        detect-secrets scan --baseline .secrets.baseline || true
        
    - name: 📊 Upload security test results
      uses: actions/upload-artifact@v3
      with:
        name: security-test-results
        path: |
          bandit-results.json
          safety-results.json
        retention-days: 30

  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-tests]
    if: always()
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📊 Generate test summary
      run: |
        echo "📊 Generating comprehensive test summary..."
        
        echo "# 🧪 Test Execution Summary" > test-summary.md
        echo "Generated: $(date)" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "## 📋 Test Results Overview" >> test-summary.md
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-summary.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-summary.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "## 🎯 Next Steps" >> test-summary.md
        if [ "${{ needs.unit-tests.result }}" != "success" ]; then
          echo "- ❌ Unit tests failed - review and fix issues" >> test-summary.md
        fi
        if [ "${{ needs.integration-tests.result }}" != "success" ]; then
          echo "- ❌ Integration tests failed - check database connectivity" >> test-summary.md
        fi
        if [ "${{ needs.performance-tests.result }}" != "success" ]; then
          echo "- ❌ Performance tests failed - optimize slow operations" >> test-summary.md
        fi
        if [ "${{ needs.security-tests.result }}" != "success" ]; then
          echo "- ❌ Security tests failed - address security vulnerabilities" >> test-summary.md
        fi
        
        if [ "${{ needs.unit-tests.result }}" == "success" ] && [ "${{ needs.integration-tests.result }}" == "success" ] && [ "${{ needs.performance-tests.result }}" == "success" ] && [ "${{ needs.security-tests.result }}" == "success" ]; then
          echo "- ✅ All tests passed - ready for deployment!" >> test-summary.md
        fi
        
    - name: 📤 Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md
        retention-days: 30
