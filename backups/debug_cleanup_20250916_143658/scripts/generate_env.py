#!/usr/bin/env python3
"""
Generate a secure .env file with random secrets for development.
This should be run during project setup.
"""
import os
import secrets
import string
from pathlib import Path

def generate_random_password(length=24):
    """Generate a secure random password."""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*()-_=+[{]}\\|;:'\",<.>/?`~"
    while True:
        password = ''.join(secrets.choice(alphabet) for _ in range(length))
        # Ensure the password meets complexity requirements
        if (any(c.islower() for c in password)
                and any(c.isupper() for c in password)
                and any(c.isdigit() for c in password)
                and any(c in string.punctuation for c in password)):
            return password

def generate_env_file():
    """Generate a .env file with secure defaults."""
    env_path = Path(".env")
    
    if env_path.exists():
        print("Warning: .env file already exists. Backing up to .env.bak")
        env_path.rename(".env.bak")
    
    # Generate secure secrets
    secret_key = secrets.token_urlsafe(50)
    postgres_password = generate_random_password(32)
    redis_password = generate_random_password(32)
    paperless_password = generate_random_password(32)
    admin_password = generate_random_password(24)
    
    # Read the example env file
    with open(".env.example", "r") as f:
        content = f.read()
    
    # Replace placeholder values with generated secrets
    content = content.replace("change-me-to-a-secure-secret-key", secret_key)
    content = content.replace("your-secure-password", postgres_password)
    content = content.replace("your-secure-redis-password", redis_password)
    content = content.replace("your-paperless-password", paperless_password)
    content = content.replace("change-me-to-a-secure-password", admin_password)
    
    # Write the new .env file
    with open(".env", "w") as f:
        f.write(f"# Auto-generated by generate_env.py\n")
        f.write(f"# WARNING: Keep this file secret and secure!\n\n")
        f.write(content)
    
    # Set secure permissions (read/write for user only)
    os.chmod(".env", 0o600)
    
    print("Generated new .env file with secure secrets")
    print(f"Admin password: {admin_password}")
    print("\nIMPORTANT: Save this password in a secure password manager!")
    print("You will need it to log in to the application for the first time.")

if __name__ == "__main__":
    generate_env_file()
