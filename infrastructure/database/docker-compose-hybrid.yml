version: '3.8'

services:
  # PostgreSQL for structured financial data
  postgresql:
    image: postgres:15
    container_name: vanta_ledger_postgresql
    restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432"  # Restrict to localhost only
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./postgresql/init:/docker-entrypoint-initdb.d
      - ./ssl:/etc/ssl/postgresql  # SSL certificates
    networks:
      - vanta_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vanta_user -d vanta_ledger"]
      interval: 30s
      timeout: 10s
      retries: 3
    read_only: false
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # MongoDB for document storage and AI analysis
  mongodb:
    image: mongo:8.0
    container_name: vanta_ledger_mongodb
    restart: unless-stopped
    ports:
      - "127.0.0.1:27017:27017"  # Restrict to localhost only
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./mongodb/init:/docker-entrypoint-initdb.d
      - ./ssl:/etc/ssl/mongodb  # SSL certificates
    networks:
      - vanta_network
    command: mongod --auth --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    read_only: false
    tmpfs:
      - /tmp

  # Mongo Express for MongoDB management
  mongo-express:
    image: mongo-express:latest
    container_name: vanta_ledger_mongo_express
    restart: unless-stopped
    ports:
      - "127.0.0.1:8081:8081"  # Restrict to localhost only
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
      ME_CONFIG_OPTIONS_EDITORTHEME: ambiance
      ME_CONFIG_SITE_BASEURL: /
      ME_CONFIG_SITE_SESSIONSECRET: ${SESSION_SECRET}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - vanta_network

  # pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: vanta_ledger_pgadmin
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:80"  # Restrict to localhost only
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: 'True'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./ssl:/etc/ssl/pgadmin  # SSL certificates
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - vanta_network

  # Redis for caching with authentication
  redis:
    image: redis:7-alpine
    container_name: vanta_ledger_redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"  # Restrict to localhost only
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf  # Custom config
    networks:
      - vanta_network
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    read_only: false
    tmpfs:
      - /tmp

volumes:
  postgresql_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local

networks:
  vanta_network:
    driver: bridge 